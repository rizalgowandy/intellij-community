load("@rules_java//java:defs.bzl", "java_binary")
load("//:jvm.bzl", "jvm_import")
load("@rules_kotlin//kotlin:jvm.bzl", "kt_jvm_library")
load("//:src/jvm-args.bzl", "get_jvm_flags")

kt_jvm_library(
    name = "worker-lib",
    srcs = glob(["*.kt", "impl/*.kt", "state/*.kt"]),
    kotlinc_opts = "//:rules_jvm_bootstrap_kotlinc_options",
    deps = [
        "@lib//:kotlin-stdlib",
        "@lib//:fastutil-min",
        "@lib//:opentelemetry",
        "//src/compiler-util",
        "//src/worker-framework",
        "@rules_java//java/runfiles",
        ":jps-standalone",
        "//:kotlin-jps-plugin",
        "//src/jps-builder/packager",
        "@lib//:hash4j",
        "@lib//:mvstore",
        "//:arrow-vector",
        "//:arrow-memory-netty",
        "//:arrow-memory-core",
        "//:arrow-algorithm",
        "@lib//:jps-javac-extension",
    ],
    runtime_deps = [
        # arrow wants slf4j
        "@lib//:slf4j-api",
        "@lib//:slf4j-jdk14",
        # use IJ logger as backend for slf4j
        "@lib//:log4_j",
        # ByteBufferBackedInputStream is used by arrow
        "@lib//:jackson",
        "@lib//:jackson-databind",
        # jps needs these libs
        "@lib//:asm",
        "@lib//:aalto-xml",
        "@lib//:caffeine",
        "@lib//:platform-jps-build-qdox-java-parser",
        # JPS plugin to compile Kotlin requires it
        "@lib//:kotlin-reflect",
        "//:kotlin-build-tools-api",
        "//:kotlin-metadata",
        "//:kotlin-util-klib",
        "//:kotlin-util-klib-metadata",
    ],
    visibility = ["//visibility:public"],
)

# java_import(
#     name = "jps-standalone",
#     jars = ["jps-build-standalone.jar"],
#     visibility = ["//src/jps-builder:__subpackages__"],
# )
jvm_import(
    name = "jps-standalone",
    jar = "@jps-standalone_http//file",
    source_jar = "@jps-standalone_http//file",
    visibility = ["//src/jps-builder:__subpackages__"],
)

java_binary(
    name = "worker-jvm",
    runtime_deps = [":worker-lib"],
    data = [
        "@kotlinc//:kotlinc_dist",
        "@kotlin-serialization-compiler-plugin//file",
    ],
    main_class = "org.jetbrains.bazel.jvm.jps.JpsBuildWorker",
    jvm_flags = get_jvm_flags([
        "-Dkotlin.environment.keepalive=true",
        "-Djps.use.experimental.storage=true",
        "-Djps.kotlin.home=$(rlocationpath @kotlinc//:kotlinc_dist)",
        "-Dorg.jetbrains.kotlin.kotlin-serialization-compiler-plugin.path=$(rlocationpath @kotlin-serialization-compiler-plugin//file)",
    ]),
    visibility = ["//visibility:public"],
)